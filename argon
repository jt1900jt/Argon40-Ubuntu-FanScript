#!/bin/bash

# Define constants
GITHUB_REPO="https://raw.githubusercontent.com/jt1900jt/Argon40-Ubuntu-FanScript/main"
SCRIPT_FILE="/usr/local/bin/argon_fan_control.py"
CONFIG_FILE="/etc/argon_fan_config.json"
SERVICE_FILE="/etc/systemd/system/argon_fan_control.service"
ARGON_CMD="/usr/local/bin/argon"
FAN_PIN=4  # Update this to the correct GPIO pin for your fan

# Function to update the script from GitHub
update_fan_control() {
    echo "Updating the fan control script and configuration from GitHub..."

    # Download the latest fan control script
    sudo wget -O $SCRIPT_FILE "$GITHUB_REPO/argon_fan_control.py"
    sudo chmod +x $SCRIPT_FILE

    # Download the latest configuration file
    sudo wget -O $CONFIG_FILE "$GITHUB_REPO/fan_config.json"
    sudo chmod 644 $CONFIG_FILE

    # Download the latest argon command script (this script itself)
    sudo wget -O $ARGON_CMD "$GITHUB_REPO/argon"
    sudo chmod +x $ARGON_CMD

    # Reload the systemd service to apply the updates
    echo "Reloading the systemd service..."
    sudo systemctl daemon-reload && sudo systemctl restart argon_fan_control.service

    echo "Update complete. The argon command and fan control script have been updated."
}

# Function to get the current CPU temperature
get_cpu_temp() {
    temp=$(vcgencmd measure_temp | sed 's/[^0-9.]//g')
    if [ -n "$temp" ]; then
        echo "Current CPU temperature: $temp°C"
    else
        echo "Failed to retrieve CPU temperature."
        exit 1
    fi
}

# Function to return the current fan speed based on the temperature
get_fan_speed() {
    current_temp=$(get_cpu_temp)
    fan_speeds=$(jq -r '.fan_speeds' $CONFIG_FILE)

    current_speed=0
    for temp in $(echo $fan_speeds | jq -r 'keys[]'); do
        if (( $(echo "$current_temp >= $temp" | awk '{print ($1 >= $2)}') )); then
            current_speed=$(echo $fan_speeds | jq -r --arg temp "$temp" '.[$temp]')
        fi
    done

    if [ -n "$current_speed" ]; then
        echo "Current fan speed: $current_speed%"
    else
        echo "Failed to determine the fan speed."
    fi
}

# Function to stop the fan and disable the service
stop_fan_service() {
    echo "Stopping the fan control service..."
    sudo systemctl stop argon_fan_control.service

    echo "Turning off the fan (setting speed to 0)..."
    echo "0" > /sys/class/gpio/gpio$FAN_PIN/value  # Ensure this writes to the correct pin

    echo "Fan control service stopped and fan turned off."
}

# Function to start the fan control service
start_fan_service() {
    echo "Starting the fan control service..."
    sudo systemctl start argon_fan_control.service

    if sudo systemctl is-active --quiet argon_fan_control.service; then
        echo "Fan control service started."
    else
        echo "Failed to start the fan control service."
    fi
}

# Function to show the current fan configuration in a readable format
show_fan_config() {
    echo "Current Fan Configuration:"
    fan_speeds=$(jq -r '.fan_speeds' $CONFIG_FILE)
    hysteresis=$(jq -r '.hysteresis' $CONFIG_FILE)

    echo "Fan Speeds:"
    for temp in $(echo $fan_speeds | jq -r 'keys[]'); do
        speed=$(echo $fan_speeds | jq -r --arg temp "$temp" '.[$temp]')
        echo "  Temperature: $temp°C => Fan Speed: $speed%"
    done

    echo "Hysteresis: $hysteresis°C"
}

# Parse command line arguments
if [ "$1" == "-update" ]; then
    update_fan_control
elif [ "$1" == "-speed" ]; then
    get_fan_speed
elif [ "$1" == "-temp" ]; then
    get_cpu_temp
elif [ "$1" == "-h" ]; then
    update_hysteresis "$2"
elif [ "$1" == "-config" ]; then
    update_fan_config "$2"
elif [ "$1" == "-show" ]; then
    show_fan_config
elif [ "$1" == "-stop" ]; then
    stop_fan_service
elif [ "$1" == "-start" ]; then
    start_fan_service
else
    echo "Usage: argon -update, argon -speed, argon -temp, argon -h hysteresis_value, argon -config temp:fanspeed,temp1:fanspeed1, argon -show, argon -stop, argon -start"
    exit 1
fi
